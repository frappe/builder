-- ============================================================================
-- Modula Builder Integration - Database Schema
-- ============================================================================
-- This schema should be applied to the Modula (Sngine) MySQL database
-- It stores artifacts generated by builder.modula.digital
-- ============================================================================

-- Table: modula_builder_artifacts
-- Stores published builds and their artifacts
CREATE TABLE IF NOT EXISTS `modula_builder_artifacts` (
    `id` INT AUTO_INCREMENT PRIMARY KEY,

    -- Project & Build Identification
    `project_id` VARCHAR(50) NOT NULL COMMENT 'Modula project identifier',
    `build_code` VARCHAR(50) UNIQUE NOT NULL COMMENT 'Unique build code (e.g., b_abc123)',
    `version` VARCHAR(20) NOT NULL COMMENT 'Semantic version (e.g., 1.0.1)',
    `type` ENUM('profile_tab', 'widget', 'page', 'component', 'layout', 'card') NOT NULL COMMENT 'Build type',

    -- Metadata
    `name` VARCHAR(255) COMMENT 'Human-readable name',
    `description` TEXT COMMENT 'Build description',

    -- Artifact Storage (Database)
    `html_fragment` MEDIUMTEXT COMMENT 'Clean HTML fragment for runtime injection',
    `mdk_json` MEDIUMTEXT COMMENT 'MDK JSON schema for re-editing',
    `smarty_tpl` MEDIUMTEXT COMMENT 'Smarty template code',

    -- Artifact Storage (File Paths)
    `html_path` VARCHAR(500) COMMENT 'Path to HTML fragment file',
    `mdk_path` VARCHAR(500) COMMENT 'Path to MDK JSON file',
    `smarty_path` VARCHAR(500) COMMENT 'Path to Smarty template file',

    -- File Metadata
    `mime_type` VARCHAR(100) DEFAULT 'text/html',
    `file_size` INT COMMENT 'Total size in bytes',
    `checksum` VARCHAR(64) COMMENT 'SHA-256 checksum',

    -- Ownership & Status
    `created_by` INT NOT NULL COMMENT 'User ID from Sngine users table',
    `status` ENUM('draft', 'published', 'archived') DEFAULT 'draft',

    -- Timestamps
    `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    `updated_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    `published_at` TIMESTAMP NULL COMMENT 'Last publish timestamp',

    -- Indexes for performance
    INDEX `idx_project` (`project_id`),
    INDEX `idx_build` (`build_code`),
    INDEX `idx_type` (`type`),
    INDEX `idx_status` (`status`),
    INDEX `idx_created_by` (`created_by`),
    INDEX `idx_created_at` (`created_at`),

    -- Foreign key to Sngine users
    CONSTRAINT `fk_builder_artifacts_user`
        FOREIGN KEY (`created_by`)
        REFERENCES `users` (`user_id`)
        ON DELETE CASCADE

) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
COMMENT='Stores artifacts generated by Modula Builder';


-- Table: modula_builder_versions
-- Version history and snapshots
CREATE TABLE IF NOT EXISTS `modula_builder_versions` (
    `id` INT AUTO_INCREMENT PRIMARY KEY,

    -- Version Identification
    `artifact_id` INT NOT NULL COMMENT 'Reference to modula_builder_artifacts.id',
    `version` VARCHAR(20) NOT NULL COMMENT 'Version string (e.g., 1.0.1)',

    -- Snapshot Data
    `snapshot_json` MEDIUMTEXT NOT NULL COMMENT 'Complete MDK JSON snapshot',
    `change_summary` VARCHAR(500) COMMENT 'Summary of changes in this version',

    -- Metadata
    `created_by` INT NOT NULL,
    `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    -- Indexes
    INDEX `idx_artifact` (`artifact_id`),
    INDEX `idx_version` (`version`),
    UNIQUE KEY `unique_artifact_version` (`artifact_id`, `version`),

    -- Foreign keys
    CONSTRAINT `fk_builder_versions_artifact`
        FOREIGN KEY (`artifact_id`)
        REFERENCES `modula_builder_artifacts` (`id`)
        ON DELETE CASCADE,

    CONSTRAINT `fk_builder_versions_user`
        FOREIGN KEY (`created_by`)
        REFERENCES `users` (`user_id`)
        ON DELETE CASCADE

) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
COMMENT='Version history for builder artifacts';


-- Table: modula_builder_deployments
-- Track deployment history
CREATE TABLE IF NOT EXISTS `modula_builder_deployments` (
    `id` INT AUTO_INCREMENT PRIMARY KEY,

    -- Deployment Identification
    `artifact_id` INT NOT NULL,
    `version` VARCHAR(20) NOT NULL,

    -- Deployment Info
    `environment` ENUM('development', 'staging', 'production') DEFAULT 'production',
    `deployed_to` VARCHAR(255) COMMENT 'Target location (page route, widget slot, etc.)',
    `deployment_url` VARCHAR(500) COMMENT 'Public URL of deployed artifact',

    -- Status
    `status` ENUM('pending', 'active', 'inactive', 'failed') DEFAULT 'pending',
    `error_message` TEXT COMMENT 'Error details if deployment failed',

    -- Metadata
    `deployed_by` INT NOT NULL,
    `deployed_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    `deactivated_at` TIMESTAMP NULL,

    -- Indexes
    INDEX `idx_artifact` (`artifact_id`),
    INDEX `idx_environment` (`environment`),
    INDEX `idx_status` (`status`),

    -- Foreign keys
    CONSTRAINT `fk_builder_deployments_artifact`
        FOREIGN KEY (`artifact_id`)
        REFERENCES `modula_builder_artifacts` (`id`)
        ON DELETE CASCADE,

    CONSTRAINT `fk_builder_deployments_user`
        FOREIGN KEY (`deployed_by`)
        REFERENCES `users` (`user_id`)
        ON DELETE CASCADE

) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
COMMENT='Deployment history for builder artifacts';


-- Table: modula_builder_sessions
-- Track active builder sessions
CREATE TABLE IF NOT EXISTS `modula_builder_sessions` (
    `id` INT AUTO_INCREMENT PRIMARY KEY,

    -- Session Identification
    `session_token` VARCHAR(255) UNIQUE NOT NULL COMMENT 'JWT token hash',
    `project_id` VARCHAR(50) NOT NULL,
    `build_code` VARCHAR(50),

    -- User & Permissions
    `user_id` INT NOT NULL,
    `permissions` JSON COMMENT 'Session permissions (edit, publish, etc.)',

    -- Session Lifecycle
    `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    `expires_at` TIMESTAMP NOT NULL,
    `last_activity_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    `closed_at` TIMESTAMP NULL,

    -- Metadata
    `ip_address` VARCHAR(45),
    `user_agent` VARCHAR(500),

    -- Indexes
    INDEX `idx_user` (`user_id`),
    INDEX `idx_project` (`project_id`),
    INDEX `idx_expires_at` (`expires_at`),

    -- Foreign key
    CONSTRAINT `fk_builder_sessions_user`
        FOREIGN KEY (`user_id`)
        REFERENCES `users` (`user_id`)
        ON DELETE CASCADE

) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
COMMENT='Active builder sessions for security and tracking';


-- ============================================================================
-- Views for easier querying
-- ============================================================================

-- View: Latest Published Artifacts
CREATE OR REPLACE VIEW `v_builder_latest_artifacts` AS
SELECT
    a.id,
    a.project_id,
    a.build_code,
    a.version,
    a.type,
    a.name,
    a.status,
    a.html_path,
    a.mdk_path,
    a.smarty_path,
    a.published_at,
    a.created_by,
    u.user_name AS created_by_name,
    u.user_email AS created_by_email
FROM modula_builder_artifacts a
LEFT JOIN users u ON a.created_by = u.user_id
WHERE a.status = 'published'
ORDER BY a.published_at DESC;


-- View: Active Deployments
CREATE OR REPLACE VIEW `v_builder_active_deployments` AS
SELECT
    d.id,
    d.artifact_id,
    a.project_id,
    a.build_code,
    d.version,
    a.type,
    a.name,
    d.environment,
    d.deployed_to,
    d.deployment_url,
    d.deployed_at,
    d.deployed_by,
    u.user_name AS deployed_by_name
FROM modula_builder_deployments d
INNER JOIN modula_builder_artifacts a ON d.artifact_id = a.id
LEFT JOIN users u ON d.deployed_by = u.user_id
WHERE d.status = 'active'
ORDER BY d.deployed_at DESC;


-- ============================================================================
-- Stored Procedures
-- ============================================================================

DELIMITER $$

-- Procedure: Create new artifact with version
CREATE PROCEDURE `sp_create_builder_artifact`(
    IN p_project_id VARCHAR(50),
    IN p_build_code VARCHAR(50),
    IN p_type VARCHAR(20),
    IN p_name VARCHAR(255),
    IN p_html_fragment MEDIUMTEXT,
    IN p_mdk_json MEDIUMTEXT,
    IN p_smarty_tpl MEDIUMTEXT,
    IN p_created_by INT,
    OUT p_artifact_id INT
)
BEGIN
    -- Insert artifact
    INSERT INTO modula_builder_artifacts (
        project_id,
        build_code,
        version,
        type,
        name,
        html_fragment,
        mdk_json,
        smarty_tpl,
        created_by,
        status
    ) VALUES (
        p_project_id,
        p_build_code,
        '1.0.0',
        p_type,
        p_name,
        p_html_fragment,
        p_mdk_json,
        p_smarty_tpl,
        p_created_by,
        'draft'
    );

    SET p_artifact_id = LAST_INSERT_ID();

    -- Create initial version snapshot
    INSERT INTO modula_builder_versions (
        artifact_id,
        version,
        snapshot_json,
        change_summary,
        created_by
    ) VALUES (
        p_artifact_id,
        '1.0.0',
        p_mdk_json,
        'Initial version',
        p_created_by
    );
END$$


-- Procedure: Publish artifact
CREATE PROCEDURE `sp_publish_builder_artifact`(
    IN p_artifact_id INT,
    IN p_version VARCHAR(20),
    IN p_user_id INT
)
BEGIN
    UPDATE modula_builder_artifacts
    SET
        status = 'published',
        version = p_version,
        published_at = CURRENT_TIMESTAMP
    WHERE id = p_artifact_id;
END$$


-- Procedure: Get artifact by project
CREATE PROCEDURE `sp_get_artifact_by_project`(
    IN p_project_id VARCHAR(50)
)
BEGIN
    SELECT
        a.*,
        v.snapshot_json,
        u.user_name AS created_by_name
    FROM modula_builder_artifacts a
    LEFT JOIN modula_builder_versions v ON a.id = v.artifact_id AND a.version = v.version
    LEFT JOIN users u ON a.created_by = u.user_id
    WHERE a.project_id = p_project_id
    AND a.status IN ('published', 'draft')
    ORDER BY a.updated_at DESC
    LIMIT 1;
END$$


-- Procedure: Cleanup expired sessions
CREATE PROCEDURE `sp_cleanup_builder_sessions`()
BEGIN
    UPDATE modula_builder_sessions
    SET closed_at = CURRENT_TIMESTAMP
    WHERE expires_at < CURRENT_TIMESTAMP
    AND closed_at IS NULL;
END$$

DELIMITER ;


-- ============================================================================
-- Sample Data (Optional - for testing)
-- ============================================================================

-- Uncomment to insert sample data

/*
INSERT INTO modula_builder_artifacts (
    project_id,
    build_code,
    version,
    type,
    name,
    html_fragment,
    mdk_json,
    created_by,
    status
) VALUES (
    'proj_demo_001',
    'b_sample123',
    '1.0.0',
    'profile_tab',
    'Sample Profile Header',
    '<div class="profile-header"><h1>{{user.name}}</h1></div>',
    '{"version":"1.0.0","type":"profile_tab","tree":{}}',
    1,
    'published'
);
*/


-- ============================================================================
-- Grants & Permissions
-- ============================================================================

-- Grant permissions to Modula application user
-- Replace 'modula_user' with your actual database user

/*
GRANT SELECT, INSERT, UPDATE, DELETE
ON modula_builder_artifacts
TO 'modula_user'@'localhost';

GRANT SELECT, INSERT, UPDATE, DELETE
ON modula_builder_versions
TO 'modula_user'@'localhost';

GRANT SELECT, INSERT, UPDATE, DELETE
ON modula_builder_deployments
TO 'modula_user'@'localhost';

GRANT SELECT, INSERT, UPDATE, DELETE
ON modula_builder_sessions
TO 'modula_user'@'localhost';

GRANT EXECUTE
ON PROCEDURE sp_create_builder_artifact
TO 'modula_user'@'localhost';

GRANT EXECUTE
ON PROCEDURE sp_publish_builder_artifact
TO 'modula_user'@'localhost';

GRANT EXECUTE
ON PROCEDURE sp_get_artifact_by_project
TO 'modula_user'@'localhost';

FLUSH PRIVILEGES;
*/


-- ============================================================================
-- Maintenance & Optimization
-- ============================================================================

-- Event: Auto-cleanup expired sessions (runs daily)
CREATE EVENT IF NOT EXISTS `evt_cleanup_builder_sessions`
ON SCHEDULE EVERY 1 DAY
STARTS CURRENT_TIMESTAMP
DO
    CALL sp_cleanup_builder_sessions();


-- Event: Archive old versions (keep last 10 per artifact)
CREATE EVENT IF NOT EXISTS `evt_archive_old_versions`
ON SCHEDULE EVERY 1 WEEK
STARTS CURRENT_TIMESTAMP
DO
    DELETE v1 FROM modula_builder_versions v1
    WHERE v1.id NOT IN (
        SELECT id FROM (
            SELECT id
            FROM modula_builder_versions v2
            WHERE v2.artifact_id = v1.artifact_id
            ORDER BY v2.created_at DESC
            LIMIT 10
        ) AS keep_versions
    );


-- ============================================================================
-- Indexes & Performance Tuning
-- ============================================================================

-- Analyze tables for query optimization
ANALYZE TABLE modula_builder_artifacts;
ANALYZE TABLE modula_builder_versions;
ANALYZE TABLE modula_builder_deployments;
ANALYZE TABLE modula_builder_sessions;


-- ============================================================================
-- Migration Notes
-- ============================================================================

-- To apply this schema to your Modula database:
--
-- 1. Backup your database first:
--    mysqldump -u root -p modula_db > backup_$(date +%Y%m%d).sql
--
-- 2. Apply this schema:
--    mysql -u root -p modula_db < modula_database_schema.sql
--
-- 3. Verify tables were created:
--    mysql -u root -p modula_db -e "SHOW TABLES LIKE 'modula_builder%';"
--
-- 4. Update Modula config with builder settings
--
-- ============================================================================
